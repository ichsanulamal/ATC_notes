WEBVTT

0
00:00:12.739 --> 00:00:16.479
So what we will do uh this being a hands on session, right?

1
00:00:16.860 --> 00:00:20.000
I will explain, OK, some of these features and as, as we go through, right,

2
00:00:20.010 --> 00:00:21.190
for each of the

3
00:00:21.940 --> 00:00:24.809
capabilities are use cases that we do as hands on.

4
00:00:24.819 --> 00:00:25.600
I will just keep,

5
00:00:25.610 --> 00:00:30.100
keep calling out the key messages that we have to uh pass on to the client.

6
00:00:30.610 --> 00:00:32.799
So the use cases that we would see today

7
00:00:33.119 --> 00:00:33.810
are

8
00:00:34.060 --> 00:00:38.130
the first couple of steps in the five step process that we were looking at.

9
00:00:38.279 --> 00:00:38.860
So

10
00:00:39.200 --> 00:00:41.740
one, how do we establish a living knowledge base?

11
00:00:43.169 --> 00:00:43.950
And second,

12
00:00:44.060 --> 00:00:48.180
we will just talk about how do we leverage the, the knowledge base

13
00:00:48.430 --> 00:00:49.860
and start

14
00:00:50.099 --> 00:00:53.580
implementing some of the use cases which we call this hyper automation,

15
00:00:53.590 --> 00:00:56.830
which would probably uh which mostly is focused on

16
00:00:57.740 --> 00:00:59.279
resolving tickets.

17
00:00:59.840 --> 00:01:00.439
All right.

18
00:01:00.709 --> 00:01:01.520
Uh

19
00:01:02.169 --> 00:01:04.839
Before I get in, OK, just a couple of uh

20
00:01:05.250 --> 00:01:08.239
messages. OK? That we already went through living knowledge base

21
00:01:08.370 --> 00:01:11.940
is going to have consist of OK. Three major components.

22
00:01:12.529 --> 00:01:13.269
One is OK.

23
00:01:13.279 --> 00:01:15.190
Your traditionally what we were using,

24
00:01:15.199 --> 00:01:18.760
say your SOP is that the client had knowledge based articles

25
00:01:19.750 --> 00:01:23.529
or uh diagnostics, information about the application

26
00:01:23.849 --> 00:01:25.089
or any process

27
00:01:25.410 --> 00:01:27.150
the second part of it is OK? The

28
00:01:27.379 --> 00:01:29.449
implicit knowledge, OK? The SME had

29
00:01:30.169 --> 00:01:31.819
and finally OK. Today, OK.

30
00:01:31.830 --> 00:01:34.790
What we are going to see is one of the most exciting thing with GEN A

31
00:01:34.800 --> 00:01:36.830
is how do we reverse engineer code and

32
00:01:36.839 --> 00:01:39.319
generate documentation even for application that don't have

33
00:01:39.889 --> 00:01:40.940
any documentation.

34
00:01:41.129 --> 00:01:42.279
And then hyper

35
00:01:42.379 --> 00:01:46.540
automation is where OK, we will see how we can resolve tickets using. Yeah or gen A.

36
00:01:46.639 --> 00:01:49.019
So what you see on screen is the genus A landing page.

37
00:01:49.690 --> 00:01:50.879
Click on get started.

38
00:01:51.730 --> 00:01:57.069
And here you would see the list of all projects to which OK, you would have access to

39
00:01:57.580 --> 00:01:59.940
for the demo. We have access to a banking form.

40
00:02:00.379 --> 00:02:02.589
I'm going to click on view this project

41
00:02:07.629 --> 00:02:08.720
on the landing page.

42
00:02:09.119 --> 00:02:10.229
On the left hand side,

43
00:02:10.559 --> 00:02:13.330
you have the list of use cases

44
00:02:14.220 --> 00:02:17.080
exactly listed as per the discussion that we had.

45
00:02:17.360 --> 00:02:20.130
So typically OK, we start with building the living knowledge base.

46
00:02:20.139 --> 00:02:25.229
So you have the first part of the demo or OK. First part of uh the use cases static.

47
00:02:26.699 --> 00:02:31.369
Now the module here, OK. This helps in setting up the gen A based knowledge base.

48
00:02:31.380 --> 00:02:32.570
So for any A I or J

49
00:02:32.679 --> 00:02:37.380
A use case, right? Data, the the input data is key now here. OK.

50
00:02:37.389 --> 00:02:40.369
We will see how do we get uh how do we build that?

51
00:02:40.869 --> 00:02:42.250
Now, traditionally

52
00:02:42.800 --> 00:02:43.380
there were

53
00:02:44.059 --> 00:02:48.619
uh keys, one of the key sources of knowledge, right? OK. Is the existing SOPS

54
00:02:49.070 --> 00:02:51.649
are uh the knowledge base articles were there

55
00:02:51.910 --> 00:02:55.080
for some of these clients? We have also seen clients use

56
00:02:55.300 --> 00:02:58.369
a lot of tools like uh uh BBM tool like Selinus.

57
00:02:58.539 --> 00:03:02.179
For example, if I click on the process diagnostics, right? For example, OK.

58
00:03:02.190 --> 00:03:04.330
Here we have the data from Selinus

59
00:03:05.139 --> 00:03:07.559
of one of the clients. OK? You can look at OK, how Salle

60
00:03:07.800 --> 00:03:08.630
is actually OK,

61
00:03:09.520 --> 00:03:11.440
captures a business process

62
00:03:11.649 --> 00:03:12.240
and it took,

63
00:03:12.250 --> 00:03:14.529
it gives details about what are the steps in the world and what

64
00:03:14.539 --> 00:03:17.679
were the uh what was the throughput of each of those steps?

65
00:03:17.690 --> 00:03:20.210
Now, this gets added to our knowledge base. OK.

66
00:03:20.539 --> 00:03:22.029
The other part of the knowledge

67
00:03:22.190 --> 00:03:26.990
is the knowledge base that the, the implicit knowledge. OK, that an SME has.

68
00:03:27.330 --> 00:03:28.669
Now how do we capture that?

69
00:03:29.360 --> 00:03:32.110
What we have been doing in the past is we would

70
00:03:32.119 --> 00:03:34.940
typically have transition sessions like the call that we're having.

71
00:03:34.949 --> 00:03:35.080
Now,

72
00:03:35.639 --> 00:03:37.339
once this is recorded,

73
00:03:38.160 --> 00:03:39.589
we can transcribe the call.

74
00:03:40.669 --> 00:03:41.240
So here, OK.

75
00:03:41.250 --> 00:03:43.520
We see a number of uh KT sessions that

76
00:03:43.529 --> 00:03:47.110
have happened across different waves and different functional areas.

77
00:03:47.139 --> 00:03:48.809
If you look at banking payments,

78
00:03:50.350 --> 00:03:53.770
now, I can see that there were multiple sessions. OK? Which have happened

79
00:03:54.990 --> 00:03:55.850
on this topic.

80
00:03:56.539 --> 00:04:00.990
For each topic, I can look at that whether a transcript is available or not.

81
00:04:02.240 --> 00:04:04.410
Once a transcript is available,

82
00:04:04.699 --> 00:04:06.690
I can view the transcript

83
00:04:07.490 --> 00:04:10.479
where you see the actual video on the left

84
00:04:10.880 --> 00:04:12.759
and the transcription at the right

85
00:04:13.449 --> 00:04:15.800
transcription by itself is not gene,

86
00:04:17.218 --> 00:04:18.889
we have a lot of tools. OK? Which does that.

87
00:04:19.539 --> 00:04:24.609
But what we do is we use our deep learning models to capture content. OK?

88
00:04:24.618 --> 00:04:27.109
Which is being shared like the architecture diagram,

89
00:04:27.419 --> 00:04:29.919
which is being uh shared over screen

90
00:04:30.419 --> 00:04:32.289
embedded within the transcript at

91
00:04:32.648 --> 00:04:34.348
the uh at the right places.

92
00:04:35.290 --> 00:04:39.369
Once the transcription is available across multiple sessions,

93
00:04:40.109 --> 00:04:44.690
we can create a system understanding document which synthesizes

94
00:04:45.920 --> 00:04:49.299
uh data from all of this and creates one single documentation.

95
00:04:51.600 --> 00:04:52.130
OK?

96
00:04:54.230 --> 00:04:57.739
So we talked about two sources of knowledge, uh knowledge part,

97
00:04:57.750 --> 00:05:00.980
the process diagnosis and the knowledge from the S MS the third.

98
00:05:00.989 --> 00:05:03.519
And the most important. And the most exciting part

99
00:05:03.779 --> 00:05:06.489
is how we reverse engineer the application.

100
00:05:10.600 --> 00:05:10.899
OK?

101
00:05:11.100 --> 00:05:12.649
So while we reverse engineer,

102
00:05:12.950 --> 00:05:15.130
what I'm going to do is the first thing is OK.

103
00:05:15.140 --> 00:05:16.769
I've clicked on reverse engineer in the left

104
00:05:16.890 --> 00:05:17.929
and I'm going to add

105
00:05:19.329 --> 00:05:21.010
an application source code

106
00:05:21.309 --> 00:05:22.829
which I want to reverse engineer.

107
00:05:23.200 --> 00:05:26.519
So when I clicked on plus, it has uh it has opened me my

108
00:05:26.850 --> 00:05:27.000
github.

109
00:05:28.029 --> 00:05:30.820
I can see all my code files which are loaded here.

110
00:05:35.239 --> 00:05:35.269
OK?

111
00:05:35.750 --> 00:05:37.170
And what I'm going to do is

112
00:05:37.459 --> 00:05:39.029
I'm going to expand

113
00:05:39.149 --> 00:05:40.760
the gen with a Copilot

114
00:05:43.700 --> 00:05:45.230
and I'm going to prompt the thing that I

115
00:05:45.239 --> 00:05:48.320
want to upload my code for my retail banking application

116
00:05:51.429 --> 00:05:53.540
if you notice. OK. The Copilot has two modes.

117
00:05:53.549 --> 00:05:57.130
One is a command mode and another is a Q and A mode right now. It is in a command mode.

118
00:05:57.140 --> 00:05:59.700
So I'm issuing a command asking you to upload my coat.

119
00:06:01.119 --> 00:06:04.390
So I love to browse pointer to the right source code file.

120
00:06:06.510 --> 00:06:10.230
I'm here. I'm going to browse and I'm going to load my,

121
00:06:13.750 --> 00:06:15.700
see once the file is uploaded.

122
00:06:18.380 --> 00:06:20.869
All right. Now I can start with my reverse engineering.

123
00:06:30.540 --> 00:06:31.920
Now, I can view the output

124
00:06:38.450 --> 00:06:42.269
two key things to sh uh to talk to your client about. One is

125
00:06:42.510 --> 00:06:44.029
let's start with the topology.

126
00:06:45.640 --> 00:06:46.459
So what

127
00:06:46.709 --> 00:06:48.100
by reverse engineering,

128
00:06:48.299 --> 00:06:50.929
we have created the hierarchy of our application.

129
00:06:51.359 --> 00:06:53.339
So if I for example, if I take

130
00:06:53.989 --> 00:06:54.799
one of the

131
00:06:54.989 --> 00:06:56.109
three files

132
00:06:56.220 --> 00:06:56.690
here,

133
00:06:58.269 --> 00:07:00.140
you can see the code on the right hand side

134
00:07:00.809 --> 00:07:02.489
of this account dot C file,

135
00:07:02.619 --> 00:07:05.109
you can scroll down and you can look at the whole code,

136
00:07:07.779 --> 00:07:10.559
you can also look at the explanation of this quote.

137
00:07:12.609 --> 00:07:16.279
So this is what Gen Air has generated about

138
00:07:16.619 --> 00:07:17.799
this particular file

139
00:07:18.600 --> 00:07:21.829
and it has explained what functionality is being

140
00:07:23.970 --> 00:07:25.619
implemented using this code file.

141
00:07:26.820 --> 00:07:27.130
Yeah,

142
00:07:28.239 --> 00:07:30.790
while we understood what is this code is for,

143
00:07:31.899 --> 00:07:33.380
we also reverse engineer

144
00:07:33.619 --> 00:07:36.779
and extract the business rules from the court

145
00:07:37.209 --> 00:07:39.459
and convert it into a user story.

146
00:07:39.679 --> 00:07:41.420
So if I click on this user story,

147
00:07:44.440 --> 00:07:48.609
we have identified the user story for which OK. This code would have been written

148
00:07:49.480 --> 00:07:50.570
and the acceptance criteria

149
00:07:51.420 --> 00:07:52.019
that's coming,

150
00:07:58.700 --> 00:07:59.679
I'm going to move on.

151
00:08:00.250 --> 00:08:02.750
I can also similarly write the future

152
00:08:04.470 --> 00:08:06.489
to which OK? This user story is related to.

153
00:08:10.839 --> 00:08:12.019
Now another

154
00:08:12.390 --> 00:08:17.459
thing is if I look, if I have to, if I understood what the

155
00:08:17.649 --> 00:08:18.869
business rule is,

156
00:08:19.059 --> 00:08:22.579
we could also generate the test case or the steps

157
00:08:22.980 --> 00:08:24.079
which are required to

158
00:08:25.420 --> 00:08:26.700
regression test this

159
00:08:26.809 --> 00:08:28.559
use case if it is implemented today.

160
00:08:30.890 --> 00:08:34.750
So you can see the test case, the expected result and the test steps here,

161
00:08:38.219 --> 00:08:41.280
Jen Wizzard would also generate the test script.

162
00:08:42.880 --> 00:08:44.739
So in this case, it's a Selenium script

163
00:08:46.869 --> 00:08:48.250
which can be used to test,

164
00:08:48.700 --> 00:08:50.809
which could be uh which could be executed to

165
00:08:51.510 --> 00:08:52.580
test this functionality.

166
00:08:54.140 --> 00:08:54.789
Now, what did

167
00:08:58.469 --> 00:08:59.710
now what has happened is

168
00:09:00.010 --> 00:09:03.190
we started with an just with application code, we have reversed engineered.

169
00:09:03.200 --> 00:09:07.049
We've extracted the rules. We also have created a regression suite pack.

170
00:09:08.539 --> 00:09:08.770
Yeah.

171
00:09:11.690 --> 00:09:12.750
Now if I go back

172
00:09:15.210 --> 00:09:19.450
now that a single application might have multiple class files

173
00:09:19.630 --> 00:09:20.190
or

174
00:09:20.479 --> 00:09:22.299
uh multiple files

175
00:09:22.979 --> 00:09:24.150
and multiple methods,

176
00:09:25.260 --> 00:09:27.049
how do we consolidate all this knowledge?

177
00:09:27.940 --> 00:09:28.599
If

178
00:09:28.940 --> 00:09:30.159
I can click on the wiki,

179
00:09:31.390 --> 00:09:33.359
I would see all this knowledge.

180
00:09:33.369 --> 00:09:36.250
OK, being put into documentation about this whole application.

181
00:09:37.520 --> 00:09:39.820
So it has different sections like overview,

182
00:09:39.830 --> 00:09:42.099
what were the futures of this application,

183
00:09:43.650 --> 00:09:44.909
the functional architecture,

184
00:09:45.559 --> 00:09:47.630
the technical architecture and the sequence

185
00:09:47.799 --> 00:09:50.520
diagrams you can scroll through and you can look at

186
00:09:51.539 --> 00:09:54.690
what are all the information that we reverse engineer and what we generate here.

187
00:09:58.130 --> 00:09:58.150
Yeah.

188
00:09:59.270 --> 00:10:00.969
So what do we have as of now?

189
00:10:02.080 --> 00:10:03.900
We have got code explanation.

190
00:10:03.909 --> 00:10:07.059
We have got a reverse engineer and created the user stories.

191
00:10:07.070 --> 00:10:09.099
We have created the test cases and test scripts.

192
00:10:10.549 --> 00:10:12.500
We have generated a wiki of the application.

193
00:10:12.630 --> 00:10:14.940
We have harvested the knowledge from reverse engineering.

194
00:10:15.950 --> 00:10:17.580
Now, how do I start using this

195
00:10:17.940 --> 00:10:18.489
knowledge?

196
00:10:19.690 --> 00:10:19.799
However,

197
00:10:19.809 --> 00:10:21.640
we established a living knowledge base and the best

198
00:10:21.650 --> 00:10:23.630
part of it is this is living knowledge base.

199
00:10:23.640 --> 00:10:25.229
So if the code changes,

200
00:10:25.510 --> 00:10:28.380
we could regenerate all of this again on the flight.

201
00:10:30.969 --> 00:10:31.469
OK.

202
00:10:31.869 --> 00:10:33.669
Now how do I start using this knowledge?

203
00:10:34.780 --> 00:10:35.630
The first

204
00:10:35.989 --> 00:10:36.799
use case

205
00:10:37.229 --> 00:10:38.460
is to have

206
00:10:38.599 --> 00:10:38.609
a

207
00:10:38.909 --> 00:10:40.239
digital assistant.

208
00:10:43.119 --> 00:10:46.059
OK. A Q and a assistant who could cater to different persons.

209
00:10:46.659 --> 00:10:47.770
For example,

210
00:10:48.200 --> 00:10:49.130
um

211
00:10:50.710 --> 00:10:54.760
uh a a support engineer or a developer might want to ask some questions. OK.

212
00:10:54.770 --> 00:10:56.650
Say maybe what are the payment methods?

213
00:10:57.010 --> 00:10:59.640
You could ask questions and the and the board is going

214
00:10:59.650 --> 00:11:03.539
to immediately look for information from what has been generated.

215
00:11:03.880 --> 00:11:06.890
Every time we reverse engineer an application or a wiki,

216
00:11:07.619 --> 00:11:11.159
it could once OK, it is also approved. It also goes and to the knowledge base.

217
00:11:11.169 --> 00:11:13.679
So that means OK, any time OK, somebody has a question,

218
00:11:13.799 --> 00:11:16.500
they could immediately get a response.

219
00:11:16.539 --> 00:11:19.919
It could be used by multiple person as a developer might want to know about

220
00:11:20.109 --> 00:11:21.419
some of the features. Uh

221
00:11:21.549 --> 00:11:23.650
OK. Support engineer might have a ticket.

222
00:11:23.659 --> 00:11:27.400
OK, which is talking about in year 001, they get an immediate answer.

223
00:11:29.429 --> 00:11:30.409
So at the end of

224
00:11:30.890 --> 00:11:33.510
the living knowledge base, now we have

225
00:11:34.520 --> 00:11:35.239
the knowledge

226
00:11:35.390 --> 00:11:38.719
and we have uh digital assistant.

227
00:11:39.469 --> 00:11:44.619
I uh so most of this part has been done by the traditional models, right? OK. So

228
00:11:44.770 --> 00:11:46.580
what is the differentiation that OK,

229
00:11:46.590 --> 00:11:48.969
we are bringing in from an asset perspective here?

230
00:11:48.979 --> 00:11:49.440
OK.

231
00:11:49.869 --> 00:11:51.869
Understood we might be switching it, but I think

232
00:11:52.349 --> 00:11:54.059
most of this can be issued through the prompt

233
00:11:54.070 --> 00:11:57.049
engineering that comes from the base foundational models,

234
00:11:57.059 --> 00:11:57.280
right?

235
00:11:57.289 --> 00:11:59.859
I mean, just what kind of custom development

236
00:12:00.419 --> 00:12:04.880
it has been done here to qualify this kind of more from an asset to my visit

237
00:12:05.159 --> 00:12:06.390
or general visit asset perspective.

238
00:12:07.150 --> 00:12:09.070
See the foundation models

239
00:12:10.960 --> 00:12:14.570
don't do that to the to the end to end perspective that OK, we are doing

240
00:12:15.299 --> 00:12:15.609
OK

241
00:12:15.890 --> 00:12:16.440
with prompt

242
00:12:16.559 --> 00:12:19.190
integrating, you could probably get it but OK with Jen,

243
00:12:19.380 --> 00:12:20.250
you're getting it

244
00:12:20.450 --> 00:12:21.650
right out of the box

245
00:12:22.460 --> 00:12:24.359
and I would also probably OK, I think that OK,

246
00:12:24.369 --> 00:12:26.679
once you go through the remaining set of use cases,

247
00:12:26.690 --> 00:12:28.140
you will get to understand we are OK?

248
00:12:28.150 --> 00:12:29.320
Just at step one,

249
00:12:30.409 --> 00:12:32.650
we OK, we are just establishing the knowledge base

250
00:12:32.840 --> 00:12:36.280
but the key benefit to the client or the differentiation keeps

251
00:12:36.289 --> 00:12:39.049
coming as we build on top of this living knowledge base.

252
00:12:41.229 --> 00:12:43.789
OK? So I think OK, your question, OK, will get answered. OK?

253
00:12:43.799 --> 00:12:45.559
As we go through the remaining steps as well.

254
00:12:47.479 --> 00:12:47.880
So

255
00:12:48.039 --> 00:12:50.340
one quick difference, my Addison is

256
00:12:51.479 --> 00:12:54.130
so when you upload a code, right, there are a lot of code chunks, right?

257
00:12:54.140 --> 00:12:56.390
For each one, you need to write a prompt,

258
00:12:57.289 --> 00:13:00.150
each code chunk to get an explanation and then

259
00:13:00.570 --> 00:13:03.239
um create a wiki. So uh

260
00:13:03.380 --> 00:13:07.369
your um uh LL MS can give you a code explanation for each chunk.

261
00:13:07.380 --> 00:13:08.450
You will write a separate

262
00:13:08.710 --> 00:13:09.890
prompt and all. So gene

263
00:13:10.130 --> 00:13:12.710
will come with this prompt library inbuilt already.

264
00:13:13.880 --> 00:13:15.929
Um and then create this

265
00:13:16.809 --> 00:13:19.200
all the artifacts that we not certain, right?

266
00:13:19.650 --> 00:13:21.739
So in this use case that you did

267
00:13:22.460 --> 00:13:24.849
that you pick a piece of code from a client

268
00:13:24.859 --> 00:13:28.599
and you do this all these uh reverse engineering and,

269
00:13:28.609 --> 00:13:29.640
and use cases

270
00:13:31.190 --> 00:13:34.309
for that piece of code that you took from client

271
00:13:34.669 --> 00:13:38.190
where all have this code gone. Let's say today it's sitting all in clients

272
00:13:38.859 --> 00:13:40.880
a state of applications.

273
00:13:41.359 --> 00:13:42.599
We take that code

274
00:13:43.250 --> 00:13:45.989
depending on all these deployment options that we have

275
00:13:46.000 --> 00:13:49.270
is this piece of code now gone from clients

276
00:13:49.659 --> 00:13:49.849
enter

277
00:13:50.000 --> 00:13:53.070
landscape to, I don't know in accenture's

278
00:13:53.739 --> 00:13:54.239
SJ

279
00:13:54.390 --> 00:13:57.630
wizard landscape and then maybe passed on to

280
00:13:58.440 --> 00:13:58.580
Azure A

281
00:13:59.140 --> 00:14:00.630
iops or whatever other uh

282
00:14:01.630 --> 00:14:06.109
underlying LL models that we are going to use where I'll have that piece of code,

283
00:14:06.119 --> 00:14:07.250
which is proprietary tol.

284
00:14:08.210 --> 00:14:10.409
In this particular example, where is,

285
00:14:10.419 --> 00:14:13.989
where all do we have footprints of that piece of?

286
00:14:17.270 --> 00:14:21.359
So there are two parts to the answer. One is OK. Where has the code gone?

287
00:14:21.369 --> 00:14:24.390
And then finally, where is the code uh the data getting stored

288
00:14:24.659 --> 00:14:26.599
uh where it has gone

289
00:14:27.130 --> 00:14:27.239
de

290
00:14:27.340 --> 00:14:28.489
that depends on

291
00:14:28.650 --> 00:14:30.630
where we are hosting

292
00:14:31.429 --> 00:14:31.880
Z visit

293
00:14:32.059 --> 00:14:33.450
in a accenture hosted.

294
00:14:34.169 --> 00:14:35.830
Then with, of course, look at the data,

295
00:14:35.840 --> 00:14:38.409
the client source code or the data has come from

296
00:14:38.419 --> 00:14:41.549
their environment into accenture environment and it gets processed,

297
00:14:41.760 --> 00:14:42.679
it gets stored.

298
00:14:44.219 --> 00:14:44.849
And for,

299
00:14:45.270 --> 00:14:46.429
for reverse engineer, I

300
00:14:46.840 --> 00:14:47.690
work uh

301
00:14:47.950 --> 00:14:49.159
uh to,

302
00:14:49.330 --> 00:14:50.849
to reverse engineer and to process.

303
00:14:50.859 --> 00:14:54.469
And even for the upcoming use cases, we are going to send this to

304
00:14:54.570 --> 00:14:54.940
Azure Open

305
00:14:55.090 --> 00:14:55.869
Air, which is our

306
00:14:56.659 --> 00:14:58.960
uh underlying foundation model today. But of course,

307
00:14:59.109 --> 00:15:00.260
we'll have more choices later.

308
00:15:01.000 --> 00:15:03.520
But when it gets sent to Azure,

309
00:15:03.530 --> 00:15:06.000
the key question that you're trying to answer is what is the

310
00:15:06.010 --> 00:15:08.479
security or what does uh what does it mean for the client?

311
00:15:09.119 --> 00:15:09.690
So there

312
00:15:10.729 --> 00:15:13.669
a zero open A because we are not using uh we

313
00:15:13.679 --> 00:15:15.940
are using the enterprise subscription of a zero open area,

314
00:15:15.950 --> 00:15:16.309
right?

315
00:15:16.440 --> 00:15:17.739
So that means that

316
00:15:18.859 --> 00:15:21.780
a Microsoft Azure does not store that code,

317
00:15:22.349 --> 00:15:24.200
they don't use it for training their models.

318
00:15:25.599 --> 00:15:27.400
It is a clean entry and a clean exit.

319
00:15:29.479 --> 00:15:32.260
OK? So that is the assurance that

320
00:15:32.489 --> 00:15:35.619
the data is not stored in any form by you as your open

321
00:15:35.869 --> 00:15:35.960
A I

322
00:15:36.469 --> 00:15:40.570
our agreement will ensure, but it will still make a round trip, it will go there,

323
00:15:40.580 --> 00:15:41.969
they process the data and

324
00:15:42.099 --> 00:15:43.419
feed the output back.

325
00:15:43.950 --> 00:15:44.309
Yes.

326
00:15:44.530 --> 00:15:48.890
But where it gets stored is ultimately OK? In our own vector database.

327
00:15:50.969 --> 00:15:54.539
OK. Now where the vector database might remain in an un

328
00:15:54.669 --> 00:15:57.140
premised deployment, it might remain on premise in accenture size

329
00:15:57.359 --> 00:15:57.429
and

330
00:15:57.659 --> 00:15:58.760
it remains with us

331
00:15:59.359 --> 00:16:01.750
depending on the deployment options, whatever they choose,

332
00:16:02.099 --> 00:16:03.349
that's where it will store.

333
00:16:03.659 --> 00:16:03.799
Yeah,

334
00:16:04.130 --> 00:16:06.909
but I, I do, I just want to extend this question.

335
00:16:06.919 --> 00:16:09.799
I think one of the reasons why this question keeps coming up

336
00:16:09.809 --> 00:16:12.590
or one of the uh drivers behind this question is right?

337
00:16:12.599 --> 00:16:14.179
Whether clients would agree to

338
00:16:14.809 --> 00:16:17.010
share their code with accenture as the environment of the

339
00:16:17.119 --> 00:16:17.150
thing?

340
00:16:17.809 --> 00:16:19.559
I think we also have to look at

341
00:16:20.200 --> 00:16:23.020
what are the tools that the client is using? Are they using github

342
00:16:23.479 --> 00:16:25.159
or something which is already on cloud?

343
00:16:25.520 --> 00:16:29.030
But if client uses client would use, even if they're using cloud,

344
00:16:29.039 --> 00:16:31.479
they'll use under their own subscription of cloud.

345
00:16:31.510 --> 00:16:32.369
See even

346
00:16:32.679 --> 00:16:32.950
a open,

347
00:16:33.390 --> 00:16:35.859
we could uh if the client is already

348
00:16:36.179 --> 00:16:39.219
having a zero open a subscription, we could leverage that.

349
00:16:40.409 --> 00:16:43.330
We don't have, they don't have to go with accenture subscription of open

350
00:16:43.460 --> 00:16:43.580
yet

351
00:16:45.070 --> 00:16:45.799
with our,

352
00:16:45.989 --> 00:16:47.690
with our platform, we can leverage

353
00:16:48.049 --> 00:16:49.450
how whatever, OK,

354
00:16:49.460 --> 00:16:53.299
the the client subscription with their own security policies enforced on top of it,

355
00:16:53.309 --> 00:16:54.010
we can use it.

356
00:16:56.260 --> 00:17:00.270
Uh So this is applicable for which technologies are we talking about?

357
00:17:00.280 --> 00:17:02.169
The complete cloud technologies like

358
00:17:02.820 --> 00:17:06.530
Azure fabric or maybe Informatica, things like that as well?

359
00:17:06.579 --> 00:17:09.560
Or is it limited to the web applications?

360
00:17:12.010 --> 00:17:13.670
Uh You mean the reverse engineering?

361
00:17:14.040 --> 00:17:15.670
Yes, the reverse engineering

362
00:17:16.358 --> 00:17:19.760
uh see it works uh properly.

363
00:17:19.979 --> 00:17:22.780
Uh I think I can get the uh technologies that

364
00:17:22.790 --> 00:17:25.540
we have tested and where it works very well.

365
00:17:25.550 --> 00:17:29.020
So it works very well for java.net Python

366
00:17:29.189 --> 00:17:32.819
and Angler and a lot of focus scripting languages very well.

367
00:17:33.239 --> 00:17:33.579
OK.

368
00:17:34.160 --> 00:17:35.170
Uh uh

369
00:17:35.729 --> 00:17:36.689
proce

370
00:17:36.979 --> 00:17:36.989
a

371
00:17:37.119 --> 00:17:39.099
lot of OK, languages that are already,

372
00:17:39.109 --> 00:17:43.729
which we have tested and it works very well and that list is ever expanding.

373
00:17:44.449 --> 00:17:45.069
OK.

374
00:17:45.359 --> 00:17:46.150
Uh

375
00:17:46.280 --> 00:17:47.060
And there has been uh

376
00:17:47.250 --> 00:17:49.290
different levels of success with

377
00:17:49.479 --> 00:17:50.780
platforms like ASAP.

378
00:17:52.079 --> 00:17:52.780
OK.

379
00:17:53.239 --> 00:17:54.069
How about the date

380
00:17:54.229 --> 00:17:54.349
I

381
00:17:55.869 --> 00:17:58.000
uh data side? I don't think.

382
00:17:58.010 --> 00:18:01.540
OK, we have an example today but uh but I'm sure, OK,

383
00:18:01.550 --> 00:18:05.729
it's into our uh a number of new areas like that are looking to our road map

384
00:18:06.250 --> 00:18:08.209
to gen whatever has been generated

385
00:18:08.459 --> 00:18:09.209
using the reverse

386
00:18:09.400 --> 00:18:09.449
engine

387
00:18:09.560 --> 00:18:10.000
technique, it

388
00:18:10.660 --> 00:18:12.319
is not 100% accurate,

389
00:18:12.439 --> 00:18:14.969
correct. So we'll end up fine tuning that to,

390
00:18:15.079 --> 00:18:16.530
let's say, make it 100%.

391
00:18:17.349 --> 00:18:21.530
But in this case, probably 90% maybe in certain cases, it could be 70% 80%.

392
00:18:22.130 --> 00:18:23.689
But ultimately, we wanna make sure that

393
00:18:24.339 --> 00:18:28.560
it is 100% by making some enhancements of edits or whatever it is.

394
00:18:29.680 --> 00:18:32.380
Now to maintain that 100% accuracy

395
00:18:32.660 --> 00:18:33.979
on an ongoing basis.

396
00:18:34.930 --> 00:18:38.900
You said that this whole thing can be regenerated as many times as possible, right?

397
00:18:39.310 --> 00:18:40.550
So what happens to the

398
00:18:41.410 --> 00:18:43.270
edits or changes that we make?

399
00:18:44.869 --> 00:18:45.369
Uh

400
00:18:45.469 --> 00:18:49.439
do we need to make it every time or it's maintained separately so that

401
00:18:50.300 --> 00:18:52.280
you know that Accurus is maintained all through?

402
00:18:54.329 --> 00:18:56.069
Uh huh see um

403
00:18:57.060 --> 00:18:57.739
uh a

404
00:18:58.329 --> 00:19:00.750
anything that you edit, right?

405
00:19:00.829 --> 00:19:04.069
Uh If, if I understand the question, OK, you're saying that uh uh

406
00:19:04.420 --> 00:19:09.439
if a document has been generated with 80% accuracy. You have edited it to make it 100%

407
00:19:10.040 --> 00:19:10.329
right?

408
00:19:10.969 --> 00:19:13.540
Uh It would be retained,

409
00:19:13.689 --> 00:19:18.060
OK? What we would uh and anyway, OK, there is a uh a lot of new features as well, OK?

410
00:19:18.069 --> 00:19:18.839
Which are coming in

411
00:19:19.219 --> 00:19:21.920
but for now one OK. Important thing is OK?

412
00:19:21.930 --> 00:19:25.000
You will also see an accuracy score which indicates

413
00:19:26.290 --> 00:19:26.489
our

414
00:19:26.949 --> 00:19:28.979
current level of uh

415
00:19:30.209 --> 00:19:32.969
uh accuracy. OK? That the

416
00:19:33.310 --> 00:19:36.489
uh the system is OK, determined in terms of averse generating this.

417
00:19:38.270 --> 00:19:40.300
Now, we have built the foundation the knowledge base.

418
00:19:40.310 --> 00:19:43.810
Let's very quickly talk about how do we use this in hyper automation of

419
00:19:44.209 --> 00:19:45.410
resolving tickets.

420
00:19:45.739 --> 00:19:46.130
All right.

421
00:19:46.609 --> 00:19:47.469
One of the,

422
00:19:47.750 --> 00:19:51.199
so we have been using a tr uh for a lot of you in this call looking

423
00:19:51.229 --> 00:19:53.310
like no automatic ticket resolver which where we

424
00:19:53.319 --> 00:19:56.089
have used A I for resolving tickets for last

425
00:19:56.250 --> 00:19:57.449
78 years.

426
00:19:58.119 --> 00:20:00.310
So let's think of a scenario where

427
00:20:00.979 --> 00:20:02.339
a user, generator, ticket

428
00:20:02.520 --> 00:20:05.300
and end user who is calling a service desk

429
00:20:06.010 --> 00:20:06.849
on phone

430
00:20:07.380 --> 00:20:08.199
is reporting a,

431
00:20:09.329 --> 00:20:10.229
reporting an issue.

432
00:20:11.369 --> 00:20:14.699
Traditionally, I could not capture what the user was talking.

433
00:20:14.709 --> 00:20:16.420
I could not convert that into

434
00:20:16.859 --> 00:20:17.589
information.

435
00:20:19.099 --> 00:20:23.290
What used to happen was an engineer. Uh A user is calling an L one support team

436
00:20:23.579 --> 00:20:29.050
uh five or seven or eight minute call at the end of the call, the L one support user

437
00:20:29.439 --> 00:20:31.939
is actually summarizing what he has heard. OK?

438
00:20:31.949 --> 00:20:34.880
Or based on his notes that he has written down, he's creating a ticket,

439
00:20:35.229 --> 00:20:37.760
the ticket gets resolved mostly by an L two or

440
00:20:37.770 --> 00:20:40.040
L three engineer who did not interact to the user.

441
00:20:41.089 --> 00:20:42.589
And now that could mean that

442
00:20:42.729 --> 00:20:44.709
any information that is lost in this

443
00:20:44.719 --> 00:20:47.280
process because of the manual activity involved

444
00:20:48.000 --> 00:20:50.150
would mean a delay in resolving tickets

445
00:20:51.790 --> 00:20:53.489
that could happen for many reasons, right?

446
00:20:53.500 --> 00:20:56.060
The accent of the user could be different or

447
00:20:56.069 --> 00:20:58.290
the it could just be pure information less.

448
00:20:58.949 --> 00:21:00.359
So what we are seeing here is

449
00:21:01.180 --> 00:21:04.439
we see that a call has been started by a user

450
00:21:04.709 --> 00:21:07.369
who started calling the service desk about any issue.

451
00:21:08.290 --> 00:21:08.959
The call

452
00:21:09.800 --> 00:21:10.829
is getting recorded

453
00:21:11.640 --> 00:21:15.609
and uh the moment, OK, the call is recorded, we can actually, so in this case,

454
00:21:15.619 --> 00:21:17.369
you're seeing a conversation between the

455
00:21:18.229 --> 00:21:18.880
user and the

456
00:21:18.989 --> 00:21:19.689
one engine. Yep,

457
00:21:21.520 --> 00:21:22.479
at the end of the call,

458
00:21:23.709 --> 00:21:24.170
gen

459
00:21:24.849 --> 00:21:26.189
can some,

460
00:21:26.750 --> 00:21:29.369
you can actually you can see the whole uh conversation that the,

461
00:21:29.380 --> 00:21:33.119
the the conversation between the user and the support engineer here

462
00:21:33.290 --> 00:21:34.250
at the end of it,

463
00:21:34.630 --> 00:21:35.369
gen a can

464
00:21:35.859 --> 00:21:38.170
extract information out of it,

465
00:21:38.400 --> 00:21:39.800
map it to the

466
00:21:40.479 --> 00:21:41.079
ticket

467
00:21:41.329 --> 00:21:43.420
fields and create a template.

468
00:21:45.540 --> 00:21:47.339
So you see that the information of the whole

469
00:21:47.349 --> 00:21:50.040
conversation has come to a standard ticket template,

470
00:21:50.989 --> 00:21:53.989
which now the L one engineer can directly log as a ticket.

471
00:21:56.209 --> 00:21:57.729
So this means that there is not going to

472
00:21:57.739 --> 00:22:00.410
be any information that is lost in the process.

473
00:22:00.729 --> 00:22:02.670
Now, while I have logged the ticket,

474
00:22:05.030 --> 00:22:05.829
what next?

475
00:22:06.449 --> 00:22:08.329
How can I reserve this ticket,

476
00:22:08.910 --> 00:22:09.250
right?

477
00:22:09.930 --> 00:22:10.469
No,

478
00:22:11.290 --> 00:22:13.599
if you are following me, you can actually click on

479
00:22:13.810 --> 00:22:15.109
the ticket number

480
00:22:17.650 --> 00:22:19.239
and you can actually see

481
00:22:19.369 --> 00:22:21.430
the ticket. Ok. Having been locked,

482
00:22:22.930 --> 00:22:24.430
you can click on the ticket number.

483
00:22:25.890 --> 00:22:27.229
On the right hand side, you see

484
00:22:28.300 --> 00:22:29.520
the the ticket details.

485
00:22:32.619 --> 00:22:34.369
And if you look at the resolution tab

486
00:22:34.500 --> 00:22:36.239
because we built the knowledge base,

487
00:22:37.260 --> 00:22:38.869
all the resolution

488
00:22:39.199 --> 00:22:41.949
steps are from the knowledge base article has been

489
00:22:42.640 --> 00:22:43.349
upload it here.

490
00:22:45.089 --> 00:22:45.250
J

491
00:22:45.560 --> 00:22:46.729
also has determined

492
00:22:47.640 --> 00:22:49.410
if you click on the workflow tab. Now

493
00:22:50.349 --> 00:22:52.229
you will see that Jane also has

494
00:22:53.079 --> 00:22:54.069
generated

495
00:22:54.199 --> 00:22:59.189
or OK has identified the workflow which gets triggered to resolve this issue.

496
00:23:00.060 --> 00:23:04.160
So this seems to be a P and critical issue. And when I click on view workflow,

497
00:23:04.959 --> 00:23:08.250
it is actually showing the sequence of steps it took,

498
00:23:10.260 --> 00:23:10.839
which

499
00:23:10.949 --> 00:23:12.920
was used to resolve this process.

500
00:23:13.270 --> 00:23:14.770
One of the messages that

501
00:23:15.540 --> 00:23:16.400
I have seen

502
00:23:16.810 --> 00:23:17.670
uh

503
00:23:17.900 --> 00:23:19.560
that helps us differentiate here, right?

504
00:23:19.660 --> 00:23:20.839
For most people, OK.

505
00:23:20.849 --> 00:23:24.949
Automation is a very pointed script, say restart a bad job, there's a small script,

506
00:23:24.959 --> 00:23:26.709
OK, which goes and restart the bad job.

507
00:23:26.959 --> 00:23:28.560
But here what we are seeing is an

508
00:23:29.359 --> 00:23:31.020
workflow with all

509
00:23:31.300 --> 00:23:34.489
the intelligence built into including the decision points,

510
00:23:34.500 --> 00:23:36.900
right at different points of an automation script,

511
00:23:36.910 --> 00:23:38.550
there are different outcomes and sorry,

512
00:23:38.560 --> 00:23:41.520
different results based on a result in a previous step,

513
00:23:41.540 --> 00:23:43.609
the automation flow has to take different paths.

514
00:23:44.650 --> 00:23:46.260
And one of the things is that

515
00:23:46.430 --> 00:23:51.390
some of those steps also probably cannot be executed without a human in the loop.

516
00:23:51.719 --> 00:23:53.430
So there uh what

517
00:23:54.719 --> 00:23:57.739
what our solution? OK? Does is it could introduce

518
00:23:58.219 --> 00:24:00.260
or it could even track the

519
00:24:00.650 --> 00:24:01.780
approval process

520
00:24:02.229 --> 00:24:04.219
which could happen through a chat bot message or

521
00:24:04.229 --> 00:24:06.420
email message where when the end use uh the,

522
00:24:06.430 --> 00:24:06.910
when the appro

523
00:24:07.020 --> 00:24:10.489
when the approval provides the approval, then it can proceed to the next step.

524
00:24:13.719 --> 00:24:17.079
The OK. Some of these messages, we can really help. OK? Depending on

525
00:24:17.239 --> 00:24:20.750
uh if your audience or if a person wants to know, how do you control? OK.

526
00:24:20.760 --> 00:24:21.849
How do you make sure that

527
00:24:23.510 --> 00:24:24.989
we are automating, right? The steps

528
00:24:25.170 --> 00:24:25.930
now we could

529
00:24:27.640 --> 00:24:30.050
OK. Now, going back to our previous this right

530
00:24:30.719 --> 00:24:32.140
now, we saw the ticket number.

531
00:24:32.579 --> 00:24:34.130
If you could also click on

532
00:24:35.280 --> 00:24:36.709
uh the the other.

533
00:24:36.719 --> 00:24:41.449
Uh If you look at this, look at uh J A also has now done a root cause analysis.

534
00:24:41.469 --> 00:24:43.619
So if you click on the event tops

535
00:24:44.390 --> 00:24:45.089
link here,

536
00:24:46.589 --> 00:24:47.949
now what we are seeing is that

537
00:24:49.560 --> 00:24:53.280
when a user generated or when a user ticket was created immediately J

538
00:24:53.439 --> 00:24:55.910
has captured that event or the failure,

539
00:24:56.750 --> 00:24:58.650
it has created an event in the

540
00:24:59.170 --> 00:24:59.930
system.

541
00:25:02.040 --> 00:25:02.060
Uh

542
00:25:02.160 --> 00:25:04.329
The priority and the status has been defined.

543
00:25:04.339 --> 00:25:07.500
One of the key thing is if you click on A I insights,

544
00:25:08.150 --> 00:25:08.910
if you're with me,

545
00:25:09.859 --> 00:25:12.180
what has happened is as soon as the ticket is

546
00:25:12.189 --> 00:25:14.550
uh see automating the ticket is one part of it.

547
00:25:15.060 --> 00:25:17.780
But we all know that automation is not the end goal.

548
00:25:17.790 --> 00:25:19.569
We have to understand why this issue occur

549
00:25:21.209 --> 00:25:27.359
in a manual when it is done manually. A lot of times the focus is on resolving tickets

550
00:25:27.790 --> 00:25:32.010
and uh the root cause analysis probably gets pushed to the back burner.

551
00:25:32.910 --> 00:25:34.380
But what we, what Geno

552
00:25:34.579 --> 00:25:35.569
is now doing is

553
00:25:35.829 --> 00:25:38.489
it has first of all created a summary of what had happened

554
00:25:40.640 --> 00:25:44.219
then from the knowledge base, it has actually given the recommended resolution.

555
00:25:46.400 --> 00:25:49.930
It has done, it has created a first draft of the root cause analysis.

556
00:25:54.199 --> 00:25:58.459
While it's also doing that, it has also suggested a resolution script

557
00:25:58.780 --> 00:26:00.050
which could resolve this issue.

558
00:26:02.209 --> 00:26:05.069
Of course, this can't be directly be executed in production.

559
00:26:06.150 --> 00:26:07.400
It uh

560
00:26:08.469 --> 00:26:11.560
uh subject matter, expert reviews, this code decides, OK,

561
00:26:11.569 --> 00:26:12.569
whether this is the right thing

562
00:26:13.900 --> 00:26:15.079
and if it is the right thing,

563
00:26:16.119 --> 00:26:18.859
it can get executed and this can also be pushed into

564
00:26:18.869 --> 00:26:21.949
the library so that the next ticket of the same category

565
00:26:23.219 --> 00:26:24.449
can be resolved with this.

566
00:26:25.189 --> 00:26:26.130
So this gives

567
00:26:26.439 --> 00:26:26.449
a

568
00:26:27.859 --> 00:26:29.579
in summary, what you have got

569
00:26:29.680 --> 00:26:30.229
is

570
00:26:30.530 --> 00:26:33.469
now using the knowledge base that we saw in step one.

571
00:26:33.760 --> 00:26:35.469
Now we have done a few things.

572
00:26:36.689 --> 00:26:37.140
One

573
00:26:39.030 --> 00:26:40.150
when a user called,

574
00:26:40.219 --> 00:26:43.709
we first of all look logged the ticket automatically from the user conversation.

575
00:26:43.719 --> 00:26:45.359
We have just understood uh

576
00:26:45.689 --> 00:26:47.569
the, the voice and we have created a ticket

577
00:26:48.800 --> 00:26:49.209
two.

578
00:26:49.939 --> 00:26:51.760
We have automated that ticket,

579
00:26:51.869 --> 00:26:53.300
we have executed a workflow

580
00:26:54.180 --> 00:26:55.290
that took a result. Cer ticket

581
00:26:55.920 --> 00:26:58.180
three, we have a first draft of the root

582
00:26:58.640 --> 00:26:58.719
cause

583
00:26:59.839 --> 00:27:01.859
and a potential resolution script.

584
00:27:02.579 --> 00:27:06.560
So when you do this, I mean, as we trust more and more of the ja

585
00:27:06.660 --> 00:27:07.430
I to

586
00:27:07.839 --> 00:27:12.040
to do some of this and I think your a tr used to do that anyway, before

587
00:27:13.089 --> 00:27:16.400
one of the things is as we move more into this journey, I think

588
00:27:17.449 --> 00:27:21.229
you, you showed that OK, when something happens, it picked up a workflow

589
00:27:21.410 --> 00:27:22.619
that should be triggered,

590
00:27:23.160 --> 00:27:25.670
right? As a potential resolution and

591
00:27:25.819 --> 00:27:28.790
there may be a manual intervention for some time, et cetera.

592
00:27:29.180 --> 00:27:31.219
But could you comment a little bit about

593
00:27:32.420 --> 00:27:33.300
to what extent?

594
00:27:33.380 --> 00:27:36.800
I mean we can we can generate some explainability as to why Jane,

595
00:27:36.819 --> 00:27:38.160
I recommended that workflow

596
00:27:38.890 --> 00:27:40.510
because if I have some fine prints,

597
00:27:40.520 --> 00:27:42.430
maybe a particular keyword should be there

598
00:27:42.439 --> 00:27:44.420
and it would have picked a different workflow

599
00:27:44.609 --> 00:27:45.430
instead.

600
00:27:45.910 --> 00:27:48.020
Is there an explainability element to it?

601
00:27:48.030 --> 00:27:50.229
Saying why something is picking up or do I have to wait

602
00:27:50.239 --> 00:27:52.969
for another 100 such tickets to come in before it learns?

603
00:27:53.469 --> 00:27:54.130
No, no.

604
00:27:54.140 --> 00:27:58.709
Uh for a uh so how it identified the workflow

605
00:27:58.719 --> 00:28:01.069
is based on the short description of the ticket?

606
00:28:02.800 --> 00:28:06.089
So for each ticket, I could go back later on

607
00:28:06.439 --> 00:28:07.290
and find

608
00:28:08.770 --> 00:28:13.189
why. Uh uh what was uh what OK. Why that particular prediction?

609
00:28:13.199 --> 00:28:16.869
Which keyword, how much it influenced the final confidence score

610
00:28:17.680 --> 00:28:20.069
is part of our uh explainability.

611
00:28:20.160 --> 00:28:24.160
So you could get into automatic ticket resolver, although I'm not showing it here.

612
00:28:24.439 --> 00:28:26.660
The second version of the demo, but in the actual version, OK,

613
00:28:26.670 --> 00:28:28.699
you can actually understand how each of these

614
00:28:28.709 --> 00:28:31.540
words can uh influence the final decision.

615
00:28:34.920 --> 00:28:37.300
So there is a way to do, get that and,

616
00:28:37.310 --> 00:28:40.739
and get it corrected up front instead of waiting for a high volume of

617
00:28:40.989 --> 00:28:42.339
similar tickets to come in

618
00:28:43.689 --> 00:28:44.160
the right.

619
00:28:45.709 --> 00:28:45.989
Ok.

620
00:28:46.280 --> 00:28:46.780
Uh uh we

621
00:28:46.890 --> 00:28:47.119
of the

622
00:28:47.420 --> 00:28:48.020
location.

623
00:28:48.420 --> 00:28:50.219
I'm just wondering where does

624
00:28:50.609 --> 00:28:53.770
uh I can understand the call getting translated?

625
00:28:54.150 --> 00:28:55.780
Um you know, transcribed

626
00:28:55.949 --> 00:28:58.209
and, and uh getting the details.

627
00:28:58.329 --> 00:29:02.819
But after that wouldn't A I would have done whatever else we are trying to do.

628
00:29:04.459 --> 00:29:04.989
Do we need

629
00:29:05.219 --> 00:29:08.280
A I or should we be using A? I, let me answer this.

630
00:29:11.219 --> 00:29:11.459
Gen

631
00:29:11.930 --> 00:29:13.319
would use gen,

632
00:29:14.339 --> 00:29:15.670
it would use A I

633
00:29:15.900 --> 00:29:17.829
or it could even use a rule based

634
00:29:18.329 --> 00:29:19.050
decision

635
00:29:19.739 --> 00:29:20.650
depending on

636
00:29:21.119 --> 00:29:24.199
what it is trying to do each of the steps that we are trying to do.

637
00:29:26.140 --> 00:29:28.160
There is an appropriate mechanism that

638
00:29:28.380 --> 00:29:29.560
would be required to do it

639
00:29:30.400 --> 00:29:34.560
and the right thing would be done would be taken behind the scenes. We are not using J

640
00:29:34.810 --> 00:29:36.540
for every single place.

641
00:29:37.439 --> 00:29:39.579
It's a combination of JIA I

642
00:29:40.229 --> 00:29:41.939
and rule based automation.

643
00:29:43.439 --> 00:29:43.699
OK.

644
00:29:43.839 --> 00:29:46.390
Where you are using gen A specifically in this use case,

645
00:29:46.400 --> 00:29:47.920
one is to summarize the ticket.

646
00:29:48.079 --> 00:29:50.479
Second is to get a first draft of the

647
00:29:50.900 --> 00:29:51.709
uh root cause.

648
00:29:52.810 --> 00:29:57.030
Uh third is to find the best knowledge base are the, the,

649
00:29:57.040 --> 00:29:58.949
the recommended resolution steps.

650
00:30:00.800 --> 00:30:01.209
OK.

651
00:30:01.459 --> 00:30:02.739
I could also use J A

652
00:30:02.939 --> 00:30:06.449
in this use case to generate the workflow that we saw right

653
00:30:07.229 --> 00:30:08.060
from the. So

654
00:30:08.229 --> 00:30:10.089
if I have to create a workflow I could use. OK.

655
00:30:11.790 --> 00:30:15.550
So there are multiple areas within gen visit where OK, gen A is being used.

656
00:30:15.979 --> 00:30:16.619
OK?

657
00:30:16.780 --> 00:30:19.369
There are places where A I is used.

658
00:30:20.160 --> 00:30:21.650
All of that is OK. GEN visit,

659
00:30:23.770 --> 00:30:25.959
which underlying is L A model it uses

660
00:30:27.760 --> 00:30:32.579
see uh for the examples that we have seen so far. It is Azure open

661
00:30:32.770 --> 00:30:32.819
A I

662
00:30:33.530 --> 00:30:36.439
GP T 3.3 0.5.

663
00:30:37.229 --> 00:30:37.339
OK.

664
00:30:38.260 --> 00:30:38.650
OK.

665
00:30:39.260 --> 00:30:41.890
Uh For code generation, we would be using

666
00:30:42.130 --> 00:30:43.079
GP T four

667
00:30:44.989 --> 00:30:48.270
which is still in preview stage, but we are allowed to use it.

668
00:30:48.849 --> 00:30:52.930
Yeah, that come see all of that is completely transparent to you behind the scenes.

669
00:30:52.939 --> 00:30:54.089
OK. Uh

670
00:30:54.510 --> 00:30:57.040
Zen wizard will take care of calling the right models.

671
00:30:57.410 --> 00:31:01.910
So to reach at this, this level uh right now for auto fixing, etcetera.

672
00:31:02.239 --> 00:31:06.369
So we started to directly recording a call and you know, generating the script,

673
00:31:06.380 --> 00:31:06.839
et cetera.

674
00:31:07.189 --> 00:31:12.430
Uh But before reaching this point, do I need to, you know, uh I mean, it, it's, it's,

675
00:31:12.439 --> 00:31:14.260
it's the knowledge uh repository,

676
00:31:14.270 --> 00:31:18.459
what we built that is enough or I need to take care of topology, I need to take care of

677
00:31:18.640 --> 00:31:20.550
uh you know, installing agents and all the I

678
00:31:21.280 --> 00:31:21.750
I mean

679
00:31:22.010 --> 00:31:24.510
uh there, there should be some prerequisite.

680
00:31:25.069 --> 00:31:25.079
Uh

681
00:31:26.310 --> 00:31:28.589
yes. Uh see just like what

682
00:31:28.709 --> 00:31:29.550
Kaushik was saying, right? For,

683
00:31:29.699 --> 00:31:32.969
for deploying your OK. Gen Wither platform. There are some prerequisite

684
00:31:33.449 --> 00:31:34.949
for the use cases.

685
00:31:35.199 --> 00:31:37.300
There are some prerequisites. For example, then we

686
00:31:37.510 --> 00:31:41.979
should have access to some specific target servers and log files. OK? To which OK?

687
00:31:41.989 --> 00:31:43.329
It needs access to,

688
00:31:43.989 --> 00:31:44.020
right?

689
00:31:44.520 --> 00:31:48.069
For one use case, maybe it requires access to an application database.

690
00:31:48.079 --> 00:31:51.819
For another one, it might need the infrastructure log uh or the server logs.

691
00:31:52.319 --> 00:31:55.969
So for each use case is part of a use case design.

692
00:31:56.489 --> 00:31:57.680
It is to be taken care

693
00:31:58.119 --> 00:32:00.750
and that is where OK, your automation architects come in. OK?

694
00:32:00.760 --> 00:32:02.900
They have to design the most secure

695
00:32:03.290 --> 00:32:05.680
and the efficient way of designing an automation use case.

696
00:32:06.660 --> 00:32:10.469
Uh It needs, for example, OK. Here it needs access to your transcription of the call.

697
00:32:12.270 --> 00:32:16.599
If you, if you have a project or if you're a contractor as the service, thats correct,

698
00:32:16.760 --> 00:32:17.790
you can get it from

699
00:32:18.770 --> 00:32:22.369
Aws connect are near the system. OK? Where OK. This information is available.

700
00:32:24.520 --> 00:32:24.729
OK.

701
00:32:25.430 --> 00:32:28.329
I can reuse my existing automation

702
00:32:28.550 --> 00:32:32.589
uh repositories, right? I mean Selenium or whatever repositories I have,

703
00:32:32.739 --> 00:32:36.520
I can reuse those. And that is part of the knowledge, knowledge base. Is it?

704
00:32:36.530 --> 00:32:37.989
I mean initially when we,

705
00:32:38.130 --> 00:32:38.880
when we

706
00:32:40.229 --> 00:32:42.849
is there a question that you already have some automation

707
00:32:42.949 --> 00:32:43.589
bots subscripts.

708
00:32:44.069 --> 00:32:47.839
So yeah, we have bots. So so far we have we were driving all automation

709
00:32:47.949 --> 00:32:48.630
a automation, right?

710
00:32:48.640 --> 00:32:52.609
So I have 100 scripts already lying in my environment doing certain things, right?

711
00:32:52.619 --> 00:32:54.079
For development, I will be executing some

712
00:32:54.189 --> 00:32:55.410
creation suit, for example.

713
00:32:56.130 --> 00:32:56.550
Yes. So

714
00:32:56.650 --> 00:32:56.709
all

715
00:32:57.640 --> 00:32:58.839
the knowledge, knowledge,

716
00:32:58.979 --> 00:33:02.790
knowledge making uh the central deposit, that's the initial part of it.

717
00:33:02.949 --> 00:33:05.930
They don't go into the uh into the knowledge base.

718
00:33:05.939 --> 00:33:09.170
They would remain in your respective tools like OK?

719
00:33:09.359 --> 00:33:10.010
A LB tools.

720
00:33:11.449 --> 00:33:13.729
OK. What needs to be pulled in

721
00:33:13.900 --> 00:33:16.180
into the knowledge base? OK. That depends on the use case. OK?

722
00:33:16.189 --> 00:33:17.160
We'll pull in, for example,

723
00:33:17.170 --> 00:33:19.750
if you have a SOP and that gets added to the knowledge base, OK?

724
00:33:19.760 --> 00:33:21.280
It's going to answer in the Q and A bot.

725
00:33:21.439 --> 00:33:22.890
OK? It helps. OK? We will ingest that.

726
00:33:23.650 --> 00:33:24.150
OK.

727
00:33:25.699 --> 00:33:27.430
So it is to be defined for each use case, se

728
00:33:27.719 --> 00:33:28.560
what is required.

729
00:33:29.229 --> 00:33:33.209
So we talked about a scenario where a user is reporting a problem next. OK?

730
00:33:33.219 --> 00:33:38.420
We'll also talk about a scenario where a monitoring system has detected an issue, a

731
00:33:38.599 --> 00:33:39.969
monitoring tool, right?

732
00:33:40.180 --> 00:33:42.020
So in this case, OK, we are using

733
00:33:42.589 --> 00:33:42.920
genu

734
00:33:43.680 --> 00:33:47.250
monitoring tool. So I received, I see there is some notification.

735
00:33:47.920 --> 00:33:49.290
So when I click on this,

736
00:33:49.910 --> 00:33:52.640
I'm actually seeing that there has been an issue,

737
00:33:53.290 --> 00:33:56.939
users are able are not able to activate a new credit card.

738
00:33:59.040 --> 00:34:00.900
And now when I uh

739
00:34:01.319 --> 00:34:02.030
when I click on

740
00:34:02.239 --> 00:34:02.859
from watch,

741
00:34:04.709 --> 00:34:06.650
I can now see

742
00:34:06.969 --> 00:34:09.560
the whole topology at the top down view

743
00:34:10.228 --> 00:34:11.949
of the plane's landscape.

744
00:34:12.418 --> 00:34:14.649
So now there's a very clear indication of how

745
00:34:16.199 --> 00:34:18.688
the issues are originated at a V server

746
00:34:18.949 --> 00:34:22.300
because of which certain a pas failed and web services failed.

747
00:34:22.510 --> 00:34:24.728
And that caused an impact on one of

748
00:34:24.739 --> 00:34:27.250
the application services about raising credit limit.

749
00:34:27.270 --> 00:34:30.080
And that meant OK, the cards functionality was

750
00:34:30.280 --> 00:34:31.199
impacted

751
00:34:31.610 --> 00:34:32.780
when I go below this,

752
00:34:34.978 --> 00:34:38.438
you could show to the client if I look at the most recent issue.

753
00:34:38.810 --> 00:34:40.478
When I scroll below,

754
00:34:40.760 --> 00:34:43.830
I can see a timeline view of the different

755
00:34:43.989 --> 00:34:44.010
P.

756
00:34:44.120 --> 00:34:46.560
So it started with an issue, started with a V

757
00:34:46.668 --> 00:34:47.120
server

758
00:34:48.290 --> 00:34:53.679
few minutes or a few seconds later, it impacted your sapas and so on. Finally. OK.

759
00:34:53.688 --> 00:34:54.270
Till your

760
00:34:54.560 --> 00:34:56.270
business process failed.

761
00:34:58.459 --> 00:34:59.479
Can you click on

762
00:34:59.639 --> 00:35:01.550
the ticket number here?

763
00:35:03.100 --> 00:35:04.860
The same flow starts from here.

764
00:35:05.260 --> 00:35:06.919
We see that the ticket has been locked

765
00:35:07.449 --> 00:35:13.000
and when I click into the ticket now I can again, OK, see the resolution for this,

766
00:35:13.580 --> 00:35:14.550
the workflow

767
00:35:16.550 --> 00:35:17.699
and I can see the root cause

768
00:35:17.870 --> 00:35:18.120
as well.

769
00:35:18.939 --> 00:35:20.320
So the uh

770
00:35:21.030 --> 00:35:23.360
for a user uh for a user generator ticket,

771
00:35:23.370 --> 00:35:25.840
we had additional complexity of understanding what

772
00:35:25.850 --> 00:35:27.639
the user says and transcribe or OK,

773
00:35:27.649 --> 00:35:31.250
create that into a transcribe and create that as a ticket for a system generator

774
00:35:31.260 --> 00:35:33.719
ticket because the system generator ticket would already

775
00:35:33.729 --> 00:35:35.739
be logged in into the ticketing tool.

776
00:35:35.919 --> 00:35:38.040
We can take that and we can go through the same

777
00:35:38.050 --> 00:35:40.949
flow of triggering the automation and doing the root cause analysis.