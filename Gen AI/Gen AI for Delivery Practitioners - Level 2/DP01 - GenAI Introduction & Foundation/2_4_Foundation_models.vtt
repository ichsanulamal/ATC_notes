WEBVTT

0
00:00:15.550 --> 00:00:17.709
How can we further augment and

1
00:00:17.860 --> 00:00:20.209
orchestrate the foundation models?

2
00:00:20.219 --> 00:00:24.399
So, so far, what we were discussing is how can you know, we discussed about the

3
00:00:25.110 --> 00:00:27.170
different uh genea patterns,

4
00:00:27.180 --> 00:00:31.069
you can directly call these on the foundation models only, right?

5
00:00:31.219 --> 00:00:33.729
When uh when we look at the foundation models,

6
00:00:33.740 --> 00:00:37.799
how do we use these foundation models to understand this?

7
00:00:37.810 --> 00:00:42.580
Right. So what I'll do is I will also um create

8
00:00:43.229 --> 00:00:43.340
uh

9
00:00:44.229 --> 00:00:46.000
a blank presentation.

10
00:00:46.319 --> 00:00:51.009
And uh now in this, let me just, you know, run you through how uh you know,

11
00:00:51.020 --> 00:00:56.310
uh at a very high level, a conceptual uh architecture might look like, right?

12
00:00:56.389 --> 00:01:01.080
So at the, at the base, right, we have this foundation models.

13
00:01:01.090 --> 00:01:07.089
So these foundation models that is the it could be the GP T 3.5 GP T four Lama,

14
00:01:07.139 --> 00:01:08.199
whatever, right?

15
00:01:08.220 --> 00:01:10.790
So that is the foundation model. Then

16
00:01:11.319 --> 00:01:12.949
on top, then we have

17
00:01:13.510 --> 00:01:13.889
the

18
00:01:14.209 --> 00:01:14.739
dumps.

19
00:01:15.330 --> 00:01:15.790
So

20
00:01:17.919 --> 00:01:20.139
typically when um

21
00:01:20.419 --> 00:01:22.699
when we get uh consider the scenario, right?

22
00:01:22.709 --> 00:01:27.690
And user is uh you want to summarize a particular information,

23
00:01:27.790 --> 00:01:31.120
right? So for that, you might ask uh in a in the cha

24
00:01:31.330 --> 00:01:32.379
GP T, right?

25
00:01:32.389 --> 00:01:35.559
So can you summarize this particular information So

26
00:01:35.569 --> 00:01:37.860
what what is it that we typically send?

27
00:01:37.919 --> 00:01:40.136
So, so we ask for a pattern,

28
00:01:40.405 --> 00:01:45.005
right? And then we send an instruction to the foundation model.

29
00:01:45.036 --> 00:01:51.846
So the key components that we make use of, so we make use of this here,

30
00:01:51.856 --> 00:01:52.905
we have the pattern

31
00:01:53.316 --> 00:01:58.246
and then we also have the application. So there is an application as well.

32
00:01:58.396 --> 00:02:01.101
So this application could be any interface,

33
00:02:01.111 --> 00:02:04.232
a conversational interface or it could be, you know,

34
00:02:04.241 --> 00:02:08.061
in if we look at our technology delivery life cycle, right,

35
00:02:08.072 --> 00:02:10.792
we have different itsm tools, let's take service.

36
00:02:10.801 --> 00:02:13.841
Now now in service now say for example,

37
00:02:13.852 --> 00:02:17.951
a ticket company is being raised by the level one support team,

38
00:02:17.962 --> 00:02:19.472
the service desk team, right?

39
00:02:19.720 --> 00:02:23.729
So they write the description of the particular ticket.

40
00:02:23.740 --> 00:02:25.800
So it might be a lengthy description.

41
00:02:25.899 --> 00:02:29.600
Now, if we have to understand what the particular description is,

42
00:02:29.610 --> 00:02:31.059
we might want to summarize that.

43
00:02:31.259 --> 00:02:31.910
So

44
00:02:32.059 --> 00:02:37.100
that information, right? This can be actually create a pattern,

45
00:02:37.470 --> 00:02:38.000
right?

46
00:02:38.110 --> 00:02:41.399
And then from this, you generate a prompt,

47
00:02:41.419 --> 00:02:46.389
a prompt is nothing but an instruction which we will cover then.

48
00:02:46.399 --> 00:02:51.070
So once we have this, then it goes to the large language model,

49
00:02:51.080 --> 00:02:55.509
whichever the model is and it will extract that information.

50
00:02:55.520 --> 00:02:58.199
So and and then based on that,

51
00:02:58.899 --> 00:03:02.080
it will actually generate that particular response

52
00:03:02.399 --> 00:03:06.360
and then it will be sent back to that particular application.

53
00:03:06.369 --> 00:03:11.029
So it can be the service now or it can be the charge GP T whichever right?

54
00:03:11.059 --> 00:03:16.880
So if you look at this, right? So when you just want to do a simple summarization,

55
00:03:17.190 --> 00:03:21.649
so you might, so the information you need to give a pattern

56
00:03:21.860 --> 00:03:24.789
or you know, the what is the action that needs to be taken,

57
00:03:24.800 --> 00:03:26.500
whether you have to summarize it

58
00:03:26.710 --> 00:03:30.839
or you know, if you want to go ahead and generate a user story, right?

59
00:03:30.850 --> 00:03:33.729
So if it is uh if you're having a banking application

60
00:03:33.845 --> 00:03:37.975
and in that, you might want to, you know, create a user story, you know,

61
00:03:37.985 --> 00:03:41.404
for a particular uh uh you know, business process.

62
00:03:41.505 --> 00:03:43.544
Uh And if it's a new project,

63
00:03:43.554 --> 00:03:46.074
you might just want to go ahead and generate user

64
00:03:46.085 --> 00:03:49.145
story or you might want to generate a test case,

65
00:03:49.225 --> 00:03:50.425
you give the pattern,

66
00:03:50.679 --> 00:03:54.660
you give the instruction which is nothing but the prompt and then

67
00:03:54.669 --> 00:03:58.020
it is sent to the foundation model or the large language model,

68
00:03:58.100 --> 00:04:03.809
uh it uh passes it, it uh and it provides the response to this application,

69
00:04:04.100 --> 00:04:09.279
but this is what the uh most uh simplest form. But typically what happens is

70
00:04:09.559 --> 00:04:12.240
especially when it comes to our client

71
00:04:12.250 --> 00:04:15.839
context in the technology delivery life cycle.

72
00:04:15.850 --> 00:04:19.730
So if we go ahead only with directly, you know, uh you know,

73
00:04:19.738 --> 00:04:22.510
obtaining the information from the foundation models,

74
00:04:22.619 --> 00:04:26.109
I I it might not be correct, right? It might not be

75
00:04:26.250 --> 00:04:29.459
uh as per the client specific context

76
00:04:29.730 --> 00:04:30.399
because

77
00:04:30.529 --> 00:04:32.440
I if, if you say, for example,

78
00:04:32.450 --> 00:04:34.339
you're actually what you want to generate and

79
00:04:34.350 --> 00:04:37.829
use user story for a credit card application,

80
00:04:37.839 --> 00:04:41.029
then you need to really understand, you know, what, what is,

81
00:04:41.040 --> 00:04:43.309
what are the dependent applications, you know,

82
00:04:43.320 --> 00:04:47.320
you might want to look at the dependencies, all those other interactions as well,

83
00:04:47.329 --> 00:04:47.630
right?

84
00:04:47.700 --> 00:04:51.380
So for that, you need that actual context or you know,

85
00:04:51.390 --> 00:04:56.540
for the uh of your client and that it needs to be available.

86
00:04:56.549 --> 00:05:00.850
So it should be uh and that is something we need to maintain.

87
00:05:01.000 --> 00:05:01.929
And um

88
00:05:02.390 --> 00:05:10.429
so the context or it uh and this typically is uh stored in uh uh

89
00:05:10.980 --> 00:05:12.239
database,

90
00:05:12.470 --> 00:05:15.570
which is called as a vector database.

91
00:05:15.720 --> 00:05:16.420
Now,

92
00:05:17.040 --> 00:05:22.420
when we actually um you know, we are trying to generate that particular user story.

93
00:05:22.480 --> 00:05:27.940
So what happens is we try to get that context uh from that pattern,

94
00:05:27.950 --> 00:05:31.660
we try to make a search in this vector database.

95
00:05:32.029 --> 00:05:35.070
But prior to that, what we also do is

96
00:05:35.390 --> 00:05:36.000
we

97
00:05:36.480 --> 00:05:38.260
convert it right.

98
00:05:38.269 --> 00:05:41.739
So into a machine understandable format,

99
00:05:41.750 --> 00:05:44.779
this is converted into a numerical format.

100
00:05:44.790 --> 00:05:50.570
This entire process is called as an embedding. It goes to the vector database,

101
00:05:50.730 --> 00:05:52.260
this vector database,

102
00:05:52.480 --> 00:05:56.429
how, how different it is from a traditional

103
00:05:56.850 --> 00:05:57.200
rela

104
00:05:57.399 --> 00:06:00.369
uh you know R DB MS database, right? So

105
00:06:00.989 --> 00:06:06.290
in a, in a R DB M MS database, you have everything in terms of the rows and columns.

106
00:06:06.299 --> 00:06:07.750
But in a vector database,

107
00:06:07.760 --> 00:06:13.390
it's all you know all data is there in a three dimensional or in an N

108
00:06:13.559 --> 00:06:18.589
dimensional space, right? So it, it that is, that is what it is. So

109
00:06:18.779 --> 00:06:25.125
now what happens is when you actually uh uh you know, want to get or generate a prompt,

110
00:06:25.274 --> 00:06:31.045
you know, to get information, right? So you get the context of your client,

111
00:06:31.325 --> 00:06:36.364
you know, by embedding that uh your client specific data

112
00:06:36.825 --> 00:06:41.644
uh from the vector database, then you generate the particular prompt.

113
00:06:43.649 --> 00:06:47.850
Now this this will actually go into the large language model,

114
00:06:48.000 --> 00:06:52.260
right? Then the response will be formatted,

115
00:06:52.589 --> 00:06:55.980
right? And then it will be sent back to the application.

116
00:06:56.140 --> 00:06:59.140
So this way what happens is now

117
00:06:59.679 --> 00:07:01.239
you will not be having

118
00:07:01.649 --> 00:07:02.230
uh

119
00:07:02.390 --> 00:07:05.739
you will be getting information specific to your client

120
00:07:05.750 --> 00:07:08.109
and it will not be anything uh you know,

121
00:07:08.119 --> 00:07:10.049
from a public data store.

122
00:07:10.059 --> 00:07:13.570
It is, it will all this will be specifically for your client context.

123
00:07:13.649 --> 00:07:17.750
So the and that way we can be assured that

124
00:07:18.010 --> 00:07:19.579
uh the information

125
00:07:19.809 --> 00:07:24.750
that is generated is not a hallucinated information be

126
00:07:24.850 --> 00:07:29.160
or because gen generally what happens is uh if uh

127
00:07:29.170 --> 00:07:31.730
I'm sure you would have all tried out right in

128
00:07:31.839 --> 00:07:32.109
either

129
00:07:32.489 --> 00:07:32.619
bad or

130
00:07:32.779 --> 00:07:32.799
chai

131
00:07:33.109 --> 00:07:36.799
pt and all that, you know, it goes ahead and it might hallucinate

132
00:07:36.950 --> 00:07:41.489
or it might become very creative and imaginative when you do a con

133
00:07:41.700 --> 00:07:43.589
embedding or uh uh

134
00:07:43.700 --> 00:07:49.390
you give the context, right? So then it will give information as expected.

135
00:07:49.510 --> 00:07:55.609
And so to, to uh your application, so it fulfills the criteria that is even.

136
00:07:55.619 --> 00:07:58.459
So this is how it actually works. So

137
00:07:58.739 --> 00:07:59.929
question to all,

138
00:08:01.429 --> 00:08:03.720
let's say the application is a chat board.

139
00:08:04.250 --> 00:08:05.359
And in the chat board,

140
00:08:07.049 --> 00:08:08.200
someone is asking,

141
00:08:09.649 --> 00:08:12.269
can you tell me what is the capital of

142
00:08:12.829 --> 00:08:13.920
particular countries?

143
00:08:16.109 --> 00:08:17.029
Do you need

144
00:08:17.649 --> 00:08:21.269
the right side part of the architecture, the embedding and vector drivers?

145
00:08:21.570 --> 00:08:22.500
It is no

146
00:08:22.630 --> 00:08:23.239
why?

147
00:08:23.540 --> 00:08:24.309
Because

148
00:08:24.559 --> 00:08:28.820
you see this is a public data. This is not your client specific data.

149
00:08:29.320 --> 00:08:32.359
It is a very generic question. Common question

150
00:08:32.750 --> 00:08:33.260
and LMS

151
00:08:33.710 --> 00:08:37.229
are already pre trained on this public information.

152
00:08:38.169 --> 00:08:41.179
So your right side part is not required. But

153
00:08:41.669 --> 00:08:43.188
if a question comes

154
00:08:43.578 --> 00:08:44.508
in my bank,

155
00:08:45.109 --> 00:08:46.539
when a payment fails,

156
00:08:47.679 --> 00:08:49.789
how can I reprocess a payment?

157
00:08:52.440 --> 00:08:54.309
Now when that question comes,

158
00:08:55.590 --> 00:08:56.119
then

159
00:08:56.299 --> 00:08:59.450
it is a very bank specific payment process

160
00:09:00.520 --> 00:09:01.059
and your

161
00:09:01.309 --> 00:09:05.190
LMS are not trained on your bank specific context.

162
00:09:06.380 --> 00:09:07.270
In that case,

163
00:09:07.729 --> 00:09:09.450
you have to feed

164
00:09:10.440 --> 00:09:14.260
your banking processes, process documents into your work.

165
00:09:16.440 --> 00:09:18.900
That's where your context lies or knowledge lies

166
00:09:20.210 --> 00:09:24.739
and hence your right side part will be coming into action

167
00:09:25.289 --> 00:09:26.750
to respond to that question.

168
00:09:27.109 --> 00:09:28.840
So first it will search

169
00:09:29.739 --> 00:09:32.250
the payment failure related processes

170
00:09:32.840 --> 00:09:33.359
in vector

171
00:09:34.380 --> 00:09:35.289
uh get the co

172
00:09:35.969 --> 00:09:36.880
do the cosine

173
00:09:37.099 --> 00:09:40.179
search and get the context, then pass it to LLM

174
00:09:40.520 --> 00:09:41.989
to frame the

175
00:09:42.250 --> 00:09:47.349
uh send like the format, the outcome, the response as response format

176
00:09:47.590 --> 00:09:48.830
and then pass it to the chat.

177
00:09:50.390 --> 00:09:51.960
So whether you need

178
00:09:52.669 --> 00:09:53.059
vector vector

179
00:09:54.210 --> 00:09:58.210
embedding and all it depends upon what kind of use case you have.

180
00:10:00.880 --> 00:10:01.380
OK.

181
00:10:01.719 --> 00:10:03.219
So that's the difference

182
00:10:03.849 --> 00:10:04.020
it

183
00:10:04.309 --> 00:10:06.429
or that is the importance of vector

184
00:10:07.400 --> 00:10:08.710
in the entire architecture.

185
00:10:08.820 --> 00:10:11.950
So why we went ahead with that particular uh you

186
00:10:11.960 --> 00:10:15.890
know that um creation of the particular figure uh diagram is

187
00:10:16.169 --> 00:10:18.179
uh primarily to understand, you know,

188
00:10:18.190 --> 00:10:22.419
what are the uh layers in a gen ja I application, right.

189
00:10:22.429 --> 00:10:27.659
So uh at the foremost, we have the foundation model which is the LLM instance,

190
00:10:27.669 --> 00:10:29.250
then we have the data,

191
00:10:29.476 --> 00:10:33.745
the context, then we have the prompt which is made, which is required.

192
00:10:33.755 --> 00:10:39.776
Then the application or the UX layer there are different uh ex examples, right?

193
00:10:39.786 --> 00:10:43.885
So when we look at the application, we have different examples like the chad

194
00:10:44.075 --> 00:10:44.755
pt,

195
00:10:44.875 --> 00:10:45.306
the github

196
00:10:45.526 --> 00:10:49.325
copilot, then the prompts, these are those instructions,

197
00:10:49.335 --> 00:10:54.265
then the application data, it's more the uh uh you know the vector data.

198
00:10:54.276 --> 00:10:54.935
Then again,

199
00:10:54.945 --> 00:11:00.122
the foundation models which are the different uh you know G the GP T 3.54 and so on

200
00:11:00.242 --> 00:11:05.731
right now. And uh whatever we discussed uh in that particular uh figure now,

201
00:11:05.841 --> 00:11:10.601
so that is what is actually uh represented over here, right?

202
00:11:10.611 --> 00:11:15.062
So typically uh say, for example, if uh there is a job failure, right?

203
00:11:15.072 --> 00:11:17.122
And uh so then typically, well, you know,

204
00:11:17.132 --> 00:11:20.302
iiw what is the reason uh you know job failure?

205
00:11:20.312 --> 00:11:20.942
So then

206
00:11:21.169 --> 00:11:23.950
uh you know what the root cause analysis, right?

207
00:11:23.960 --> 00:11:25.590
So analyze the logs,

208
00:11:25.599 --> 00:11:29.630
then a prompt might be created and then it goes to the large language model.

209
00:11:29.770 --> 00:11:34.510
But uh when we actually uh look at only the um you know,

210
00:11:34.520 --> 00:11:37.349
when we try to obtain information from the public data,

211
00:11:37.479 --> 00:11:39.750
it might not meet the client context.

212
00:11:39.760 --> 00:11:45.099
So that's why we go into the context, you know, the our knowledge documents,

213
00:11:45.229 --> 00:11:45.340
right?

214
00:11:45.445 --> 00:11:49.505
So here that is what we, there is a terminology that we use,

215
00:11:49.565 --> 00:11:53.226
which is called as a retrieval, augmented generation.

216
00:11:53.346 --> 00:11:57.046
When we say retrieval or augmented generation or rag,

217
00:11:57.195 --> 00:12:04.806
it is more to actually extract the context from our vector data store, you know, so

218
00:12:04.995 --> 00:12:09.625
all our patterns, all the information it is embedded into a numerical form.

219
00:12:09.921 --> 00:12:11.081
Then from there

220
00:12:11.202 --> 00:12:11.742
uh

221
00:12:11.882 --> 00:12:15.861
in the vector data store, there is a tree that is available.

222
00:12:15.921 --> 00:12:19.791
So it creates a kind of a knowledge uh tree and then, you know,

223
00:12:19.802 --> 00:12:22.281
tries to create what are the relationships,

224
00:12:22.291 --> 00:12:25.911
entities and all those and then it generates, you know, it,

225
00:12:25.921 --> 00:12:30.341
it extracts that particular context, then it um you know, gets the data,

226
00:12:30.351 --> 00:12:33.651
it creates the prompt and then uh it provides

227
00:12:33.661 --> 00:12:36.557
the risk responses back to that particular application.

228
00:12:36.677 --> 00:12:39.398
So this is what uh it's all about.

229
00:12:39.408 --> 00:12:42.947
For example, uh if we have to, you know the,

230
00:12:42.958 --> 00:12:48.007
if that there is an issue with the a payment processing application in your client,

231
00:12:48.018 --> 00:12:48.367
right?

232
00:12:48.427 --> 00:12:53.218
We just, you know, ask that particular query in charge GP T or in part,

233
00:12:53.228 --> 00:12:58.573
it will not be able to tell why is there an payment processing failure in you know,

234
00:12:58.583 --> 00:13:00.693
application XYZ in your client,

235
00:13:00.703 --> 00:13:03.354
it will not be able to because it does not

236
00:13:03.364 --> 00:13:06.893
have that particular context which might be there in your

237
00:13:06.903 --> 00:13:11.343
system understanding documents or your standard operating procedures or your

238
00:13:11.354 --> 00:13:14.473
design documents or in your run books or playbooks,

239
00:13:14.484 --> 00:13:14.833
right?

240
00:13:14.984 --> 00:13:18.713
That information is not available, that context is missing.

241
00:13:18.833 --> 00:13:22.414
So that is why what we do is we

242
00:13:23.320 --> 00:13:25.099
vectorize that information.

243
00:13:25.109 --> 00:13:29.489
So we store that up or upload that particular information

244
00:13:29.590 --> 00:13:33.489
into a knowledge repository, which is called as the vector database.

245
00:13:33.500 --> 00:13:36.500
And this vector database stores that but it

246
00:13:36.510 --> 00:13:39.900
uh it stores the information in a numerical format

247
00:13:39.909 --> 00:13:42.619
primarily because it will be easy for it

248
00:13:42.630 --> 00:13:45.840
to search because the information is very huge,

249
00:13:45.849 --> 00:13:46.210
right?

250
00:13:46.219 --> 00:13:49.700
So it will, it converts it into a numerical format so that it will,

251
00:13:49.710 --> 00:13:53.721
it will be easy to search so that it makes use of a semantic search,

252
00:13:53.731 --> 00:13:55.702
it searches it and then it,

253
00:13:55.841 --> 00:13:57.492
you know, it performs the cosine

254
00:13:57.781 --> 00:13:59.111
similarity analysis.

255
00:13:59.151 --> 00:14:04.231
So it does that, then it identifies, you know, OK, whether there is an uh you know,

256
00:14:04.242 --> 00:14:07.671
in a match or no match and all that and then it uh you know,

257
00:14:07.682 --> 00:14:13.111
gets that particular uh actual uh context, it creates that particular prompt,

258
00:14:13.132 --> 00:14:15.581
then it sends it to the large language model.

259
00:14:15.591 --> 00:14:16.322
And then with the,

260
00:14:16.783 --> 00:14:18.054
since the response, you know,

261
00:14:18.064 --> 00:14:21.723
it formats a particular response and sends it to the application.

262
00:14:21.734 --> 00:14:22.273
So

263
00:14:22.544 --> 00:14:26.283
because you have, you're trying to get the context of your client.

264
00:14:26.294 --> 00:14:28.604
So that's why you need a vector database.

265
00:14:28.614 --> 00:14:33.414
You said in the vector uh database it holds data in the numerical format.

266
00:14:33.424 --> 00:14:37.283
Is there uh any limitation on what kind of data I can input?

267
00:14:37.294 --> 00:14:41.283
It is going to save it in the numerical format. But can I input audio video

268
00:14:41.643 --> 00:14:45.096
images, whatever it is? Or there is a limitation on that

269
00:14:45.435 --> 00:14:50.585
you can, you can input, you know audio videos or whatever you're con you're sending,

270
00:14:50.596 --> 00:14:50.806
right?

271
00:14:50.815 --> 00:14:54.156
It all gets, it all gets converted into a numerical format.

272
00:14:54.306 --> 00:14:55.856
That's how the data gets stored.

273
00:14:56.106 --> 00:14:59.416
The numerical format conversion is called vector embedding.

274
00:14:59.495 --> 00:15:02.096
So you create a vectors for each,

275
00:15:02.106 --> 00:15:07.416
each word or sentence that you have in your input document, be it a

276
00:15:07.585 --> 00:15:10.135
text like a word, document, PDF,

277
00:15:10.780 --> 00:15:13.400
Excel or audio file, video file, everything.

278
00:15:13.640 --> 00:15:19.340
So there is uh you know, I so we'll not be de delving deep into that. But essentially,

279
00:15:19.450 --> 00:15:23.010
so you know the two for embedding you have this uh you know,

280
00:15:23.020 --> 00:15:24.619
different models are available.

281
00:15:24.630 --> 00:15:25.760
You know, there is this uh uh

282
00:15:25.909 --> 00:15:27.409
uh you know the

283
00:15:27.599 --> 00:15:29.809
Darwin C is the, then the G word to V

284
00:15:29.960 --> 00:15:31.200
is the the glove.

285
00:15:31.210 --> 00:15:35.099
So all these are the multiple models are there which can be used for uh you know,

286
00:15:35.109 --> 00:15:38.799
converting it high level understanding what we typically

287
00:15:38.900 --> 00:15:44.320
do is, you know, whenever we have to get the uh uh client specific context,

288
00:15:44.330 --> 00:15:47.799
we uh vectorize the particular information we do

289
00:15:47.809 --> 00:15:49.979
have embedding and then we vectorize it,

290
00:15:50.000 --> 00:15:52.650
we store the information in a vector database.

291
00:15:52.659 --> 00:15:55.520
Then you know there is a search that happens in that

292
00:15:55.530 --> 00:16:00.130
particular vector database to see if the right context is obtained.

293
00:16:00.179 --> 00:16:04.510
And then based on that, you know, the prompt is formulated with the context,

294
00:16:04.520 --> 00:16:06.919
then that is sent to the large language model.

295
00:16:07.150 --> 00:16:11.530
And then you know the response that is generated from that large language model,

296
00:16:11.539 --> 00:16:14.830
it is uh formatted and sent back to the.

297
00:16:14.900 --> 00:16:18.099
So uh application, the application could be your service.

298
00:16:18.109 --> 00:16:22.409
Now it could be the Jira or it could be any attack interface, whichever, right.

299
00:16:22.419 --> 00:16:25.400
So it's it is sent back to that part of this rag.

300
00:16:25.409 --> 00:16:29.330
The prompt is getting created by in this process itself,

301
00:16:29.340 --> 00:16:31.280
you are not doing anything like the prompt is

302
00:16:31.289 --> 00:16:34.440
automatically getting created as part of the rag.

303
00:16:34.450 --> 00:16:36.440
So it it actually uh

304
00:16:36.552 --> 00:16:40.372
you know, get it gets the context from your vector database.

305
00:16:40.392 --> 00:16:42.651
And then based on that it, you know,

306
00:16:42.661 --> 00:16:46.312
the context is also included in the prompt and

307
00:16:46.322 --> 00:16:48.682
then it is sent to the large language model.

308
00:16:48.692 --> 00:16:52.601
So this is slightly a little more in depth as to what we discussed.

309
00:16:52.611 --> 00:16:56.512
So again, uh it, it's the same thing. So for example, there is a

310
00:16:56.642 --> 00:16:58.401
uh you know, and user might uh

311
00:16:58.541 --> 00:16:59.882
mention, you know, there's

312
00:17:00.021 --> 00:17:00.081
an

313
00:17:00.291 --> 00:17:04.661
application, the time taken to open an application might be five minutes, right?

314
00:17:04.671 --> 00:17:05.631
It's slow,

315
00:17:05.953 --> 00:17:08.733
want to understand, you know what, why it's taking a lot of time.

316
00:17:08.743 --> 00:17:13.614
Now this query it is embedded and then it's sent to the vector database.

317
00:17:13.624 --> 00:17:17.173
Then what happens is we also need to have that historical, you know,

318
00:17:17.183 --> 00:17:19.243
the knowledge base of the client also, right?

319
00:17:19.253 --> 00:17:23.173
So why is that the performance of my application, you know, slow,

320
00:17:23.183 --> 00:17:25.573
taking more than uh it's slow or why it is

321
00:17:25.583 --> 00:17:27.973
taking time to five minutes to open and all that.

322
00:17:27.983 --> 00:17:28.774
So for that,

323
00:17:28.784 --> 00:17:31.293
you will also need a knowledge repository

324
00:17:31.323 --> 00:17:34.274
and here you have your historical documents,

325
00:17:34.284 --> 00:17:35.254
your standard operator

326
00:17:35.355 --> 00:17:38.656
procedure or system understanding document or you know,

327
00:17:38.745 --> 00:17:42.696
uh you or you might have your uh design documents whatsoever, right?

328
00:17:42.706 --> 00:17:46.806
So all that is actually transformed again, this is also uh converted,

329
00:17:46.816 --> 00:17:49.475
it's embedded through an embedding model and then

330
00:17:49.485 --> 00:17:51.786
it is also stored into the vector database.

331
00:17:51.865 --> 00:17:57.176
Now, whenever an issue occurs or whenever you want to generate some user story,

332
00:17:57.186 --> 00:18:01.456
so then you know, but you go ahead and search in the vector database,

333
00:18:01.745 --> 00:18:04.615
then extract that particular result. Now

334
00:18:04.758 --> 00:18:06.767
then a particular, then uh you know,

335
00:18:06.777 --> 00:18:09.917
formulate the particular prompt and then send it

336
00:18:09.927 --> 00:18:12.258
to the large language model and you know,

337
00:18:12.267 --> 00:18:15.567
uh uh formulate that response in a particular format.

338
00:18:15.667 --> 00:18:21.017
And uh you know, or maybe you might want to uh provide the response in a table, right?

339
00:18:21.027 --> 00:18:25.807
Or in a particular um you know, if it is an incident, right, in uh you might have,

340
00:18:25.817 --> 00:18:27.618
you have an incident ID, you know,

341
00:18:27.628 --> 00:18:31.287
the created date assigned to responder description.

342
00:18:31.297 --> 00:18:34.057
So on right. And if it is say, for example, query might be

343
00:18:34.160 --> 00:18:37.920
to generate some user stories, then you might have a user story ID,

344
00:18:38.030 --> 00:18:42.680
the user story description, the created date, the acceptance criteria.

345
00:18:42.689 --> 00:18:45.329
So the response will be formulated the way

346
00:18:45.339 --> 00:18:47.859
you uh you are actually specifying your prompt,

347
00:18:47.869 --> 00:18:52.160
then this will actually be stored interim in the memory as well.

348
00:18:52.180 --> 00:18:57.300
And uh typically, it might not be just one query we might be having,

349
00:18:57.310 --> 00:19:01.939
it could be a chain of prompts or chain of queries that uh you know, we might be having.

350
00:19:01.949 --> 00:19:03.459
And so that's why there'll be in memory

351
00:19:03.562 --> 00:19:06.732
also where we'll be storing that particular information.

352
00:19:06.751 --> 00:19:11.281
Now, all the queries that we might be making use of this will be added into the memory.

353
00:19:11.291 --> 00:19:12.141
And then, you know,

354
00:19:12.251 --> 00:19:17.362
um and as we uh as there, while there are multiple queries, right, it might also uh

355
00:19:17.592 --> 00:19:23.222
for look at the historical information from this memory and then retrieve that.

356
00:19:23.232 --> 00:19:23.781
And that will,

357
00:19:23.791 --> 00:19:27.891
that that outcome also will be embedded into the prompt and

358
00:19:27.901 --> 00:19:30.141
then it car to be sent to the vector database.

359
00:19:30.151 --> 00:19:32.881
The process that is that is uh followed.